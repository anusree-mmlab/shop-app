[{"id":1,"section":"es6","question":"hoisting?","answer":["Hoisting is JavaScript's default behavior of moving declarations to the top","Variable/function is used before actually declaring it"]},{"id":2,"section":"promise,es6","question":"Why promises are advantageous over callbacks","answer":["It is easy and advanced","instead of handling success and failure in the same it is possible to do it in separate places,Promises are chain-able [multiple promises chained together]"]},{"id":3,"section":"quality","question":"Quality tools","answer":["npm outdated command will list out all the packages that need to be updated","To ensure code quality install - sudo npm install standard --g","run standard in the command line. This will shows all the errors in the current directory"]},{"id":4,"section":"esnext","question":"ES 7, ES 2017 features","answer":["Es 7 things","    ES 2016 = ES7 only 2 new features - includes and exponential operator. Others are es 2017 features","    1. array.includes which is equivalent in calculating using first find the index and get the item","        const arr = [1,2,3];","        arr.includes(2); //returns true","    2. exponential operator -  2 ** 3 = 8","    3. Object.values  and Object.entries// traversing the object by converting to an array of values","    const myObj = {","      name: \"anu\",","      place: \"cochin\",","      age: 30","    };","    for(val of Object.values(myObj)) {","      console.log(val)","    }","    for(val of Object.entries(myObj)) {","      console.log(val) // [\"name\",\"anu\"], [\"place\",\"cochin\"], [\"age\",30]","    }","    4. Async functions","    5. trailing commas","        {","      name: \"anu\",","      place: \"cochin\",","      age: 30, //This comma is valid, and is valid for arrays too","    }","","    6. https://medium.freecodecamp.org/ecmascript-2016-es7-features-86903c5cab70"]},{"id":5,"section":"git","question":"Git commands","answer":["git init","git pull theurl [branch] (master will be pulled if no branch is specified)","git remote add origin theurl","","git add --all","git commit -m \"message\"","git push origin master (branch name)","","git checkout -b branchname (new branch created with the branchname)","git branch (shows all branches and the current branch in green color)","git checkout branchname(in order to switch between branches)","git branch -d branchname (to delete branch)"]},{"id":6,"section":"prototype","question":"Give an example of javascript prototype","answer":["const f = function(name, age) {","  this.name = name;","  this.age = age;","  console.log(this.name+' is '+this.age+' years old');","}","","//f('unni', 5) //This is also working","var o2 = new f('unni',5);","var o1 = new f('chinki',2);","","console.log(o1)","f.prototype.printage = function() {","  this.age++;","  console.log('hello '+this.name+' you will be '+this.age+' next year!');","}","console.log(o1)","o2.printage();","console.log(o1)"]},{"id":7,"section":"prototype","question":"What is prototype in javascript?","answer":["1.Prototype is an inheritance model. ie used to support inheritance.","2.Every object has prototype as its attribute.ie","             Object.prototype.a = 5;","            var x = {};","            x.a //5","3. functions also has prototype attribute as they are also objects. ","Objects of a function is created using the constructor call [through new keyword]","An attribute added to the prototype is available to all the objects of that function","4. If an object directly does not have a method, then its prototype is checked for that attribute. [inheritance],","https://community.risingstack.com/javascript-prototype-chain-inheritance/","5. Prototype chaining - ?"]},{"id":8,"section":"prototype","question":"What is prototype chaining?","answer":["An object has a prototype attribute, and that has another prototype attribute and this chain continuous till the prototype becomes null. This chaining is known as prototype chaining.","let f = function () {","   this.a = 1;","   this.b = 2;","}","let o = new f(); // {a: 1, b: 2}","","//add properties in f function's prototype"," f.prototype.b = 3;"," f.prototype.c = 4;","","do not set the prototype f.prototype = {b:3,c:4}; this will break the prototype chain"," o.[[Prototype]] has properties b and c:"," Finally, o.[[Prototype]].[[Prototype]] is null.This is the end of the prototype chain, as null,"," by definition, null has no [[Prototype]].","Thus, the full prototype chain looks like: {a: 1, b: 2} ---> {b: 3, c: 4} ---> null","","var o = {a: 1};","o ---> Object.prototype ---> null","","var b = ['yo', 'whadup', '?'];"," b ---> Array.prototype ---> Object.prototype ---> null","","function f() {","  return 2;","}"," f ---> Function.prototype ---> Object.prototype ---> null"]},{"id":9,"section":"basics","question":"Basics of Js - es6","answer":["1. Types","   primitives - string, number, boolean, null, undfined. They workdirectly on its value.","   complex - Arrays, functions, objects. They work on references","","2. Objects created using {}. ","3. Arrays","     Use [] syntx to create arrays. In order to copy use the slice method.","     assigning an array to another varible won't give a copy, it is reference only.","     array.slice()","4. Atrings - use single quote rather than \"\"","5. Functions - 3 types . Anonymous , named and immediately invoked functions [callback kind of] ","       Never declare a function in a non functional block - ie inside if, while loop","        Never give arguments as a function parameter name","6. Properties","    When directly accessible with properties, use the . notation","    When accessible with variable use the [varname] notation","    var person = {name: 'anu', age: 30};","    person.name;","    function getprop(props) {","         console.log person[prop]","   }","","getprop('name'); //anu","","7. variables","without var the variables become global [not a good practice]","declaring variables in each line is good appropach rather than declare using comma separated","declare unassigend variables last","use object in reqired areas to avoid redundancy","","8. Order of mdules","core modules first [fs, http]","npm modules then [async, mongoose]","user defined /local modules last [./abcd]","9.callbacks","always check for errors in callbacks","return errors in callbacks","10. try catch","use try catch only with synchronous codes like json parse","use of this with async code can cause bringing down of the process","","11. hoisting","interpreter is hoisting the variable declarartion to the top of the scope.","A variable can be referred without actually declaring it first. This will workdue to variable hoisting","Only the functions with function declaration get hoisted, not the anonymous function call","","12. use === and !== . instead of == and !=","use if(name) rather than if(name != '')","use if (arr.length) instead of if(arr.lengt.0)","","13. Goog commentes\\","/**","*","*/"]}]